// You are given two non-empty linked lists representing two non-negative integers. 
// The digits are stored in reverse order, and each of their nodes contains a single 
// digit. Add the two numbers and return the sum as a linked list.
// You may assume the two numbers do not contain any leading zero, except the number 0 itself.

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */

var addTwoNumbers = function(l1, l2) {
    const result = new ListNode(0);
    let p = l1, q = l2, current = result; 
    let carry = 0;
    
    while(p || q) {
        const x = p ? p.val : 0, y = q ? q.val : 0;
        let summ = x + y + carry;
        current.next = new ListNode(summ % 10);
        current = current.next;
        carry = (summ - summ % 10) / 10;
        if (p) p = p.next;
        if (q) q = q.next;
    }
    
    if (carry !== 0) {
        current.next = new ListNode(1);
    }
    
    return result.next;
};
